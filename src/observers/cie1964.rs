use nalgebra::{ArrayStorage, Matrix3xX, SMatrix, convert};
use crate::{observers::StandardObserver};
use crate::util::interpolate::{sprague_rows};
use crate::util::domain::{Domain};
use crate::util::units::{NM5, WavelengthScale, Meter, Scale};


const N: usize = 95;

#[derive(Debug,Clone,Default)]
pub struct CieObs1964 {}


impl StandardObserver for CieObs1964 {
	const K: f64 = 683.0;
	const NAME: &'static str = "CIE1964";

	fn domain(&self) -> Domain<WavelengthScale> {
		Domain::new( 360/5, 830/5,  NM5)
	}

	fn cmf<L>(&self, target: &Domain<L>) -> Matrix3xX<f64>
	where
		L: Scale,
		Meter: From<<L>::UnitType>
	 {
//		calculate row interpolated values, and convert to Matrix3xX matrix... 
		let data = SMatrix::from_data(ArrayStorage(CIE1964));
		convert(sprague_rows(&self.domain(), &target, &data))
	}

}


#[test]
fn test_cmf(){
	use crate::util::units::WavelengthScale;
	use crate::observers::{CieObs1964, CieObs1931};
	use crate::models::CieLab;
	use crate::swatches::ColorChecker;
	use crate::illuminants::D65;
//	let c = CieObs1964::default().cmf(&Domain::new(4,7,WavelengthScale { size: 1,  exp: -7}));

	let lab31: CieLab::<D65, CieObs1931> = ColorChecker::<13>.into();
	let lab64: CieLab::<D65, CieObs1931> = ColorChecker::<13>.into();
	println!("{} {}", lab31, lab64);
	
}

static CIE1964: [[f64;N];3] = [
	[1.222E-07, 9.1927E-07, 5.9586E-06, 0.000033266, 0.000159952, 0.00066244, 0.0023616, 0.0072423, 0.0191097, 0.0434,
	0.084736, 0.140638, 0.204492, 0.264737, 0.314679, 0.357719, 0.383734, 0.386726, 0.370702, 0.342957, 0.302273,
	0.254085, 0.195618, 0.132349, 0.080507, 0.041072, 0.016172, 0.005132, 0.003816, 0.015444, 0.037465, 0.071358,
	0.117749, 0.172953, 0.236491, 0.304213, 0.376772, 0.451584, 0.529826, 0.616053, 0.705224, 0.793832, 0.878655,
	0.951162, 1.01416, 1.0743, 1.11852, 1.1343, 1.12399, 1.0891, 1.03048, 0.95074, 0.856297, 0.75493, 0.647467, 0.53511,
	0.431567, 0.34369, 0.268329, 0.2043, 0.152568, 0.11221, 0.0812606, 0.05793, 0.0408508, 0.028623, 0.0199413,
	0.013842, 0.00957688, 0.0066052, 0.00455263, 0.0031447, 0.00217496, 0.0015057, 0.00104476, 0.00072745, 0.000508258,
	0.00035638, 0.000250969, 0.00017773, 0.00012639, 0.000090151, 6.45258E-05, 0.000046339, 3.34117E-05, 0.000024209,
	1.76115E-05, 0.000012855, 9.41363E-06, 0.000006913, 5.09347E-06, 3.7671E-06, 2.79531E-06, 0.000002082, 1.55314E-06],
	[1.3398E-08, 1.0065E-07, 6.511E-07, 0.000003625, 0.000017364, 0.00007156, 0.0002534, 0.0007685, 0.0020044, 0.004509,
	0.008756, 0.014456, 0.021391, 0.029497, 0.038676, 0.049602, 0.062077, 0.074704, 0.089456, 0.106256, 0.128201,
	0.152761, 0.18519, 0.21994, 0.253589, 0.297665, 0.339133, 0.395379, 0.460777, 0.53136, 0.606741, 0.68566, 0.761757,
	0.82333, 0.875211, 0.92381, 0.961988, 0.9822, 0.991761, 0.99911, 0.99734, 0.98238, 0.955552, 0.915175, 0.868934,
	0.825623, 0.777405, 0.720353, 0.658341, 0.593878, 0.527963, 0.461834, 0.398057, 0.339554, 0.283493, 0.228254,
	0.179828, 0.140211, 0.107633, 0.081187, 0.060281, 0.044096, 0.0318004, 0.0226017, 0.0159051, 0.0111303, 0.0077488,
	0.0053751, 0.00371774, 0.00256456, 0.00176847, 0.00122239, 0.00084619, 0.00058644, 0.00040741, 0.000284041,
	0.00019873, 0.00013955, 0.000098428, 0.000069819, 0.000049737, 3.55405E-05, 0.000025486, 1.83384E-05, 0.000013249,
	9.6196E-06, 7.0128E-06, 5.1298E-06, 3.76473E-06, 2.77081E-06, 2.04613E-06, 1.51677E-06, 1.12809E-06, 8.4216E-07,
	6.297E-07],
	[5.35027E-07, 4.0283E-06, 2.61437E-05, 0.00014622, 0.000704776, 0.0029278, 0.0104822, 0.032344, 0.0860109, 0.19712,
	0.389366, 0.65676, 0.972542, 1.2825, 1.55348, 1.7985, 1.96728, 2.0273, 1.9948, 1.9007, 1.74537, 1.5549, 1.31756,
	1.0302, 0.772125, 0.57006, 0.415254, 0.302356, 0.218502, 0.159249, 0.112044, 0.082248, 0.060709, 0.04305, 0.030451,
	0.020584, 0.013676, 0.007918, 0.003988, 0.001091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
	0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
	0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
	
];